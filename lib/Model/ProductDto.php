<?php
/**
 * ProductDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BackOffice API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: backoffice-v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\BackOffice\Model;

use \ArrayAccess;
use \Aurigma\BackOffice\ObjectSerializer;

/**
 * ProductDto Class Doc Comment
 *
 * @category Class
 * @description Dto class, containing information about a product.
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'product_version_id' => 'int',
        'tenant_id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'image' => '\Aurigma\BackOffice\Model\ImageInfo',
        'created' => '\DateTime',
        'last_modified' => '\DateTime',
        'tags' => 'string[]',
        'custom_fields' => 'array<string,string>',
        'personalization_workflow_id' => 'int',
        'processing_pipeline_id' => 'int',
        'storefront_id' => 'int',
        'storefront_product_id' => 'string',
        'storefront_product_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'product_version_id' => 'int32',
        'tenant_id' => 'int32',
        'name' => null,
        'description' => null,
        'image' => null,
        'created' => 'date-time',
        'last_modified' => 'date-time',
        'tags' => null,
        'custom_fields' => null,
        'personalization_workflow_id' => 'int32',
        'processing_pipeline_id' => 'int32',
        'storefront_id' => 'int32',
        'storefront_product_id' => null,
        'storefront_product_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'product_version_id' => false,
        'tenant_id' => false,
        'name' => true,
        'description' => true,
        'image' => false,
        'created' => false,
        'last_modified' => true,
        'tags' => true,
        'custom_fields' => true,
        'personalization_workflow_id' => false,
        'processing_pipeline_id' => false,
        'storefront_id' => true,
        'storefront_product_id' => true,
        'storefront_product_name' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product_version_id' => 'productVersionId',
        'tenant_id' => 'tenantId',
        'name' => 'name',
        'description' => 'description',
        'image' => 'image',
        'created' => 'created',
        'last_modified' => 'lastModified',
        'tags' => 'tags',
        'custom_fields' => 'customFields',
        'personalization_workflow_id' => 'personalizationWorkflowId',
        'processing_pipeline_id' => 'processingPipelineId',
        'storefront_id' => 'storefrontId',
        'storefront_product_id' => 'storefrontProductId',
        'storefront_product_name' => 'storefrontProductName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product_version_id' => 'setProductVersionId',
        'tenant_id' => 'setTenantId',
        'name' => 'setName',
        'description' => 'setDescription',
        'image' => 'setImage',
        'created' => 'setCreated',
        'last_modified' => 'setLastModified',
        'tags' => 'setTags',
        'custom_fields' => 'setCustomFields',
        'personalization_workflow_id' => 'setPersonalizationWorkflowId',
        'processing_pipeline_id' => 'setProcessingPipelineId',
        'storefront_id' => 'setStorefrontId',
        'storefront_product_id' => 'setStorefrontProductId',
        'storefront_product_name' => 'setStorefrontProductName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product_version_id' => 'getProductVersionId',
        'tenant_id' => 'getTenantId',
        'name' => 'getName',
        'description' => 'getDescription',
        'image' => 'getImage',
        'created' => 'getCreated',
        'last_modified' => 'getLastModified',
        'tags' => 'getTags',
        'custom_fields' => 'getCustomFields',
        'personalization_workflow_id' => 'getPersonalizationWorkflowId',
        'processing_pipeline_id' => 'getProcessingPipelineId',
        'storefront_id' => 'getStorefrontId',
        'storefront_product_id' => 'getStorefrontProductId',
        'storefront_product_name' => 'getStorefrontProductName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('product_version_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('personalization_workflow_id', $data ?? [], null);
        $this->setIfExists('processing_pipeline_id', $data ?? [], null);
        $this->setIfExists('storefront_id', $data ?? [], null);
        $this->setIfExists('storefront_product_id', $data ?? [], null);
        $this->setIfExists('storefront_product_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Product identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_version_id
     *
     * @return int|null
     */
    public function getProductVersionId()
    {
        return $this->container['product_version_id'];
    }

    /**
     * Sets product_version_id
     *
     * @param int|null $product_version_id Product version identifier.
     *
     * @return self
     */
    public function setProductVersionId($product_version_id)
    {
        if (is_null($product_version_id)) {
            throw new \InvalidArgumentException('non-nullable product_version_id cannot be null');
        }
        $this->container['product_version_id'] = $product_version_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return int|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param int|null $tenant_id Tenant identifier.
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Product name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Product description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Aurigma\BackOffice\Model\ImageInfo|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Aurigma\BackOffice\Model\ImageInfo|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Product creation time.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime|null
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime|null $last_modified Product modification time.
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            array_push($this->openAPINullablesSetToNull, 'last_modified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_modified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Product tags.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,string>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,string>|null $custom_fields Product custom fields.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets personalization_workflow_id
     *
     * @return int|null
     */
    public function getPersonalizationWorkflowId()
    {
        return $this->container['personalization_workflow_id'];
    }

    /**
     * Sets personalization_workflow_id
     *
     * @param int|null $personalization_workflow_id Personalization workflow identifier.
     *
     * @return self
     */
    public function setPersonalizationWorkflowId($personalization_workflow_id)
    {
        if (is_null($personalization_workflow_id)) {
            throw new \InvalidArgumentException('non-nullable personalization_workflow_id cannot be null');
        }
        $this->container['personalization_workflow_id'] = $personalization_workflow_id;

        return $this;
    }

    /**
     * Gets processing_pipeline_id
     *
     * @return int|null
     */
    public function getProcessingPipelineId()
    {
        return $this->container['processing_pipeline_id'];
    }

    /**
     * Sets processing_pipeline_id
     *
     * @param int|null $processing_pipeline_id Processing pipeline identifier.
     *
     * @return self
     */
    public function setProcessingPipelineId($processing_pipeline_id)
    {
        if (is_null($processing_pipeline_id)) {
            throw new \InvalidArgumentException('non-nullable processing_pipeline_id cannot be null');
        }
        $this->container['processing_pipeline_id'] = $processing_pipeline_id;

        return $this;
    }

    /**
     * Gets storefront_id
     *
     * @return int|null
     */
    public function getStorefrontId()
    {
        return $this->container['storefront_id'];
    }

    /**
     * Sets storefront_id
     *
     * @param int|null $storefront_id Default storefront identifier.
     *
     * @return self
     */
    public function setStorefrontId($storefront_id)
    {
        if (is_null($storefront_id)) {
            array_push($this->openAPINullablesSetToNull, 'storefront_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storefront_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storefront_id'] = $storefront_id;

        return $this;
    }

    /**
     * Gets storefront_product_id
     *
     * @return string|null
     */
    public function getStorefrontProductId()
    {
        return $this->container['storefront_product_id'];
    }

    /**
     * Sets storefront_product_id
     *
     * @param string|null $storefront_product_id Default storefront product identifier.
     *
     * @return self
     */
    public function setStorefrontProductId($storefront_product_id)
    {
        if (is_null($storefront_product_id)) {
            array_push($this->openAPINullablesSetToNull, 'storefront_product_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storefront_product_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storefront_product_id'] = $storefront_product_id;

        return $this;
    }

    /**
     * Gets storefront_product_name
     *
     * @return string|null
     */
    public function getStorefrontProductName()
    {
        return $this->container['storefront_product_name'];
    }

    /**
     * Sets storefront_product_name
     *
     * @param string|null $storefront_product_name Default storefront product name.
     *
     * @return self
     */
    public function setStorefrontProductName($storefront_product_name)
    {
        if (is_null($storefront_product_name)) {
            array_push($this->openAPINullablesSetToNull, 'storefront_product_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storefront_product_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storefront_product_name'] = $storefront_product_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


