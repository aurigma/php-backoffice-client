<?php
/**
 * ProductVariantOptionDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BackOffice API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: backoffice-v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\BackOffice\Model;

use \ArrayAccess;
use \Aurigma\BackOffice\ObjectSerializer;

/**
 * ProductVariantOptionDto Class Doc Comment
 *
 * @category Class
 * @description Dto class, containing information about a product variant option.
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductVariantOptionDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductVariantOptionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_option_id' => 'int',
        'product_option_value_id' => 'int',
        'product_option_type' => '\Aurigma\BackOffice\Model\OptionType',
        'product_option_traits' => 'string[]',
        'product_option_title' => 'string',
        'product_option_value_title' => 'string',
        'simple_option_value' => '\Aurigma\BackOffice\Model\SimpleOptionValue'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_option_id' => 'int32',
        'product_option_value_id' => 'int32',
        'product_option_type' => null,
        'product_option_traits' => null,
        'product_option_title' => null,
        'product_option_value_title' => null,
        'simple_option_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_option_id' => true,
        'product_option_value_id' => true,
        'product_option_type' => false,
        'product_option_traits' => true,
        'product_option_title' => true,
        'product_option_value_title' => true,
        'simple_option_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_option_id' => 'productOptionId',
        'product_option_value_id' => 'productOptionValueId',
        'product_option_type' => 'productOptionType',
        'product_option_traits' => 'productOptionTraits',
        'product_option_title' => 'productOptionTitle',
        'product_option_value_title' => 'productOptionValueTitle',
        'simple_option_value' => 'simpleOptionValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_option_id' => 'setProductOptionId',
        'product_option_value_id' => 'setProductOptionValueId',
        'product_option_type' => 'setProductOptionType',
        'product_option_traits' => 'setProductOptionTraits',
        'product_option_title' => 'setProductOptionTitle',
        'product_option_value_title' => 'setProductOptionValueTitle',
        'simple_option_value' => 'setSimpleOptionValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_option_id' => 'getProductOptionId',
        'product_option_value_id' => 'getProductOptionValueId',
        'product_option_type' => 'getProductOptionType',
        'product_option_traits' => 'getProductOptionTraits',
        'product_option_title' => 'getProductOptionTitle',
        'product_option_value_title' => 'getProductOptionValueTitle',
        'simple_option_value' => 'getSimpleOptionValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product_option_id', $data ?? [], null);
        $this->setIfExists('product_option_value_id', $data ?? [], null);
        $this->setIfExists('product_option_type', $data ?? [], null);
        $this->setIfExists('product_option_traits', $data ?? [], null);
        $this->setIfExists('product_option_title', $data ?? [], null);
        $this->setIfExists('product_option_value_title', $data ?? [], null);
        $this->setIfExists('simple_option_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_option_id
     *
     * @return int|null
     */
    public function getProductOptionId()
    {
        return $this->container['product_option_id'];
    }

    /**
     * Sets product_option_id
     *
     * @param int|null $product_option_id Product option identifier.
     *
     * @return self
     */
    public function setProductOptionId($product_option_id)
    {
        if (is_null($product_option_id)) {
            array_push($this->openAPINullablesSetToNull, 'product_option_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_option_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_option_id'] = $product_option_id;

        return $this;
    }

    /**
     * Gets product_option_value_id
     *
     * @return int|null
     */
    public function getProductOptionValueId()
    {
        return $this->container['product_option_value_id'];
    }

    /**
     * Sets product_option_value_id
     *
     * @param int|null $product_option_value_id Product option value identifier.
     *
     * @return self
     */
    public function setProductOptionValueId($product_option_value_id)
    {
        if (is_null($product_option_value_id)) {
            array_push($this->openAPINullablesSetToNull, 'product_option_value_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_option_value_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_option_value_id'] = $product_option_value_id;

        return $this;
    }

    /**
     * Gets product_option_type
     *
     * @return \Aurigma\BackOffice\Model\OptionType|null
     */
    public function getProductOptionType()
    {
        return $this->container['product_option_type'];
    }

    /**
     * Sets product_option_type
     *
     * @param \Aurigma\BackOffice\Model\OptionType|null $product_option_type product_option_type
     *
     * @return self
     */
    public function setProductOptionType($product_option_type)
    {
        if (is_null($product_option_type)) {
            throw new \InvalidArgumentException('non-nullable product_option_type cannot be null');
        }
        $this->container['product_option_type'] = $product_option_type;

        return $this;
    }

    /**
     * Gets product_option_traits
     *
     * @return string[]|null
     */
    public function getProductOptionTraits()
    {
        return $this->container['product_option_traits'];
    }

    /**
     * Sets product_option_traits
     *
     * @param string[]|null $product_option_traits Product option traits.
     *
     * @return self
     */
    public function setProductOptionTraits($product_option_traits)
    {
        if (is_null($product_option_traits)) {
            array_push($this->openAPINullablesSetToNull, 'product_option_traits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_option_traits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_option_traits'] = $product_option_traits;

        return $this;
    }

    /**
     * Gets product_option_title
     *
     * @return string|null
     */
    public function getProductOptionTitle()
    {
        return $this->container['product_option_title'];
    }

    /**
     * Sets product_option_title
     *
     * @param string|null $product_option_title Product option title.
     *
     * @return self
     */
    public function setProductOptionTitle($product_option_title)
    {
        if (is_null($product_option_title)) {
            array_push($this->openAPINullablesSetToNull, 'product_option_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_option_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_option_title'] = $product_option_title;

        return $this;
    }

    /**
     * Gets product_option_value_title
     *
     * @return string|null
     */
    public function getProductOptionValueTitle()
    {
        return $this->container['product_option_value_title'];
    }

    /**
     * Sets product_option_value_title
     *
     * @param string|null $product_option_value_title Product option value title.
     *
     * @return self
     */
    public function setProductOptionValueTitle($product_option_value_title)
    {
        if (is_null($product_option_value_title)) {
            array_push($this->openAPINullablesSetToNull, 'product_option_value_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_option_value_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_option_value_title'] = $product_option_value_title;

        return $this;
    }

    /**
     * Gets simple_option_value
     *
     * @return \Aurigma\BackOffice\Model\SimpleOptionValue|null
     */
    public function getSimpleOptionValue()
    {
        return $this->container['simple_option_value'];
    }

    /**
     * Sets simple_option_value
     *
     * @param \Aurigma\BackOffice\Model\SimpleOptionValue|null $simple_option_value simple_option_value
     *
     * @return self
     */
    public function setSimpleOptionValue($simple_option_value)
    {
        if (is_null($simple_option_value)) {
            throw new \InvalidArgumentException('non-nullable simple_option_value cannot be null');
        }
        $this->container['simple_option_value'] = $simple_option_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


