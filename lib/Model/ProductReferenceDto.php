<?php
/**
 * ProductReferenceDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BackOffice API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: backoffice-v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\BackOffice\Model;

use \ArrayAccess;
use \Aurigma\BackOffice\ObjectSerializer;

/**
 * ProductReferenceDto Class Doc Comment
 *
 * @category Class
 * @description DTO class, containing information about storefront product reference.
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductReferenceDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductReferenceDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_reference' => 'string',
        'product_reference_type' => '\Aurigma\BackOffice\Model\ProductReferenceType',
        'product_reference_name' => 'string',
        'product_specification_id' => 'int',
        'product_id' => 'int',
        'product_version_id' => 'int',
        'product_link_id' => 'int',
        'storefront_id' => 'int',
        'tenant_id' => 'int',
        'created' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_reference' => null,
        'product_reference_type' => null,
        'product_reference_name' => null,
        'product_specification_id' => 'int32',
        'product_id' => 'int32',
        'product_version_id' => 'int32',
        'product_link_id' => 'int32',
        'storefront_id' => 'int32',
        'tenant_id' => 'int32',
        'created' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_reference' => true,
        'product_reference_type' => false,
        'product_reference_name' => true,
        'product_specification_id' => false,
        'product_id' => false,
        'product_version_id' => false,
        'product_link_id' => false,
        'storefront_id' => false,
        'tenant_id' => false,
        'created' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_reference' => 'productReference',
        'product_reference_type' => 'productReferenceType',
        'product_reference_name' => 'productReferenceName',
        'product_specification_id' => 'productSpecificationId',
        'product_id' => 'productId',
        'product_version_id' => 'productVersionId',
        'product_link_id' => 'productLinkId',
        'storefront_id' => 'storefrontId',
        'tenant_id' => 'tenantId',
        'created' => 'created'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_reference' => 'setProductReference',
        'product_reference_type' => 'setProductReferenceType',
        'product_reference_name' => 'setProductReferenceName',
        'product_specification_id' => 'setProductSpecificationId',
        'product_id' => 'setProductId',
        'product_version_id' => 'setProductVersionId',
        'product_link_id' => 'setProductLinkId',
        'storefront_id' => 'setStorefrontId',
        'tenant_id' => 'setTenantId',
        'created' => 'setCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_reference' => 'getProductReference',
        'product_reference_type' => 'getProductReferenceType',
        'product_reference_name' => 'getProductReferenceName',
        'product_specification_id' => 'getProductSpecificationId',
        'product_id' => 'getProductId',
        'product_version_id' => 'getProductVersionId',
        'product_link_id' => 'getProductLinkId',
        'storefront_id' => 'getStorefrontId',
        'tenant_id' => 'getTenantId',
        'created' => 'getCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product_reference', $data ?? [], null);
        $this->setIfExists('product_reference_type', $data ?? [], null);
        $this->setIfExists('product_reference_name', $data ?? [], null);
        $this->setIfExists('product_specification_id', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_version_id', $data ?? [], null);
        $this->setIfExists('product_link_id', $data ?? [], null);
        $this->setIfExists('storefront_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_reference
     *
     * @return string|null
     */
    public function getProductReference()
    {
        return $this->container['product_reference'];
    }

    /**
     * Sets product_reference
     *
     * @param string|null $product_reference Product reference is an external reference to Customer's Canvas product, e.g online store product identifier.
     *
     * @return self
     */
    public function setProductReference($product_reference)
    {
        if (is_null($product_reference)) {
            array_push($this->openAPINullablesSetToNull, 'product_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_reference'] = $product_reference;

        return $this;
    }

    /**
     * Gets product_reference_type
     *
     * @return \Aurigma\BackOffice\Model\ProductReferenceType|null
     */
    public function getProductReferenceType()
    {
        return $this->container['product_reference_type'];
    }

    /**
     * Sets product_reference_type
     *
     * @param \Aurigma\BackOffice\Model\ProductReferenceType|null $product_reference_type product_reference_type
     *
     * @return self
     */
    public function setProductReferenceType($product_reference_type)
    {
        if (is_null($product_reference_type)) {
            throw new \InvalidArgumentException('non-nullable product_reference_type cannot be null');
        }
        $this->container['product_reference_type'] = $product_reference_type;

        return $this;
    }

    /**
     * Gets product_reference_name
     *
     * @return string|null
     */
    public function getProductReferenceName()
    {
        return $this->container['product_reference_name'];
    }

    /**
     * Sets product_reference_name
     *
     * @param string|null $product_reference_name Product reference name, e.g. online store product name.
     *
     * @return self
     */
    public function setProductReferenceName($product_reference_name)
    {
        if (is_null($product_reference_name)) {
            array_push($this->openAPINullablesSetToNull, 'product_reference_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_reference_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_reference_name'] = $product_reference_name;

        return $this;
    }

    /**
     * Gets product_specification_id
     *
     * @return int|null
     */
    public function getProductSpecificationId()
    {
        return $this->container['product_specification_id'];
    }

    /**
     * Sets product_specification_id
     *
     * @param int|null $product_specification_id Customer's Canvas product specification identifier.
     *
     * @return self
     */
    public function setProductSpecificationId($product_specification_id)
    {
        if (is_null($product_specification_id)) {
            throw new \InvalidArgumentException('non-nullable product_specification_id cannot be null');
        }
        $this->container['product_specification_id'] = $product_specification_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int|null $product_id Customer's Canvas product identifier.
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_version_id
     *
     * @return int|null
     */
    public function getProductVersionId()
    {
        return $this->container['product_version_id'];
    }

    /**
     * Sets product_version_id
     *
     * @param int|null $product_version_id Customer's Canvas product version identifier.
     *
     * @return self
     */
    public function setProductVersionId($product_version_id)
    {
        if (is_null($product_version_id)) {
            throw new \InvalidArgumentException('non-nullable product_version_id cannot be null');
        }
        $this->container['product_version_id'] = $product_version_id;

        return $this;
    }

    /**
     * Gets product_link_id
     *
     * @return int|null
     */
    public function getProductLinkId()
    {
        return $this->container['product_link_id'];
    }

    /**
     * Sets product_link_id
     *
     * @param int|null $product_link_id Customer's Canvas product link identifier.
     *
     * @return self
     */
    public function setProductLinkId($product_link_id)
    {
        if (is_null($product_link_id)) {
            throw new \InvalidArgumentException('non-nullable product_link_id cannot be null');
        }
        $this->container['product_link_id'] = $product_link_id;

        return $this;
    }

    /**
     * Gets storefront_id
     *
     * @return int|null
     */
    public function getStorefrontId()
    {
        return $this->container['storefront_id'];
    }

    /**
     * Sets storefront_id
     *
     * @param int|null $storefront_id Storefront identifier.
     *
     * @return self
     */
    public function setStorefrontId($storefront_id)
    {
        if (is_null($storefront_id)) {
            throw new \InvalidArgumentException('non-nullable storefront_id cannot be null');
        }
        $this->container['storefront_id'] = $storefront_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return int|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param int|null $tenant_id Tenant identifier.
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Storefront product reference creation date and time.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


