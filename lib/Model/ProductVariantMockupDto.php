<?php
/**
 * ProductVariantMockupDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BackOffice API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: backoffice-v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\BackOffice\Model;

use \ArrayAccess;
use \Aurigma\BackOffice\ObjectSerializer;

/**
 * ProductVariantMockupDto Class Doc Comment
 *
 * @category Class
 * @description Dto class, containing information about a product variant mockup.
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductVariantMockupDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductVariantMockupDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_variant_id' => 'int',
        'product_variant_uid' => 'string',
        'product_version_id' => 'int',
        'product_id' => 'int',
        'tenant_id' => 'int',
        'storefront_product_variant_id' => 'string',
        'sku' => 'string',
        'mockup_id' => 'string',
        'mockup_name' => 'string',
        'mockup_type' => '\Aurigma\BackOffice\Model\ProductVariantMockupType',
        'surface_index' => 'int',
        'surface_usage_type' => '\Aurigma\BackOffice\Model\SurfaceUsageType',
        'product_variant_options' => '\Aurigma\BackOffice\Model\ProductVariantOptionDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_variant_id' => 'int32',
        'product_variant_uid' => null,
        'product_version_id' => 'int32',
        'product_id' => 'int32',
        'tenant_id' => 'int32',
        'storefront_product_variant_id' => null,
        'sku' => null,
        'mockup_id' => null,
        'mockup_name' => null,
        'mockup_type' => null,
        'surface_index' => 'int32',
        'surface_usage_type' => null,
        'product_variant_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_variant_id' => false,
        'product_variant_uid' => true,
        'product_version_id' => false,
        'product_id' => false,
        'tenant_id' => true,
        'storefront_product_variant_id' => true,
        'sku' => true,
        'mockup_id' => true,
        'mockup_name' => true,
        'mockup_type' => false,
        'surface_index' => true,
        'surface_usage_type' => false,
        'product_variant_options' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_variant_id' => 'productVariantId',
        'product_variant_uid' => 'productVariantUID',
        'product_version_id' => 'productVersionId',
        'product_id' => 'productId',
        'tenant_id' => 'tenantId',
        'storefront_product_variant_id' => 'storefrontProductVariantId',
        'sku' => 'sku',
        'mockup_id' => 'mockupId',
        'mockup_name' => 'mockupName',
        'mockup_type' => 'mockupType',
        'surface_index' => 'surfaceIndex',
        'surface_usage_type' => 'surfaceUsageType',
        'product_variant_options' => 'productVariantOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_variant_id' => 'setProductVariantId',
        'product_variant_uid' => 'setProductVariantUid',
        'product_version_id' => 'setProductVersionId',
        'product_id' => 'setProductId',
        'tenant_id' => 'setTenantId',
        'storefront_product_variant_id' => 'setStorefrontProductVariantId',
        'sku' => 'setSku',
        'mockup_id' => 'setMockupId',
        'mockup_name' => 'setMockupName',
        'mockup_type' => 'setMockupType',
        'surface_index' => 'setSurfaceIndex',
        'surface_usage_type' => 'setSurfaceUsageType',
        'product_variant_options' => 'setProductVariantOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_variant_id' => 'getProductVariantId',
        'product_variant_uid' => 'getProductVariantUid',
        'product_version_id' => 'getProductVersionId',
        'product_id' => 'getProductId',
        'tenant_id' => 'getTenantId',
        'storefront_product_variant_id' => 'getStorefrontProductVariantId',
        'sku' => 'getSku',
        'mockup_id' => 'getMockupId',
        'mockup_name' => 'getMockupName',
        'mockup_type' => 'getMockupType',
        'surface_index' => 'getSurfaceIndex',
        'surface_usage_type' => 'getSurfaceUsageType',
        'product_variant_options' => 'getProductVariantOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product_variant_id', $data ?? [], null);
        $this->setIfExists('product_variant_uid', $data ?? [], null);
        $this->setIfExists('product_version_id', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('storefront_product_variant_id', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('mockup_id', $data ?? [], null);
        $this->setIfExists('mockup_name', $data ?? [], null);
        $this->setIfExists('mockup_type', $data ?? [], null);
        $this->setIfExists('surface_index', $data ?? [], null);
        $this->setIfExists('surface_usage_type', $data ?? [], null);
        $this->setIfExists('product_variant_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_variant_id
     *
     * @return int|null
     */
    public function getProductVariantId()
    {
        return $this->container['product_variant_id'];
    }

    /**
     * Sets product_variant_id
     *
     * @param int|null $product_variant_id Product variant identifier.
     *
     * @return self
     */
    public function setProductVariantId($product_variant_id)
    {
        if (is_null($product_variant_id)) {
            throw new \InvalidArgumentException('non-nullable product_variant_id cannot be null');
        }
        $this->container['product_variant_id'] = $product_variant_id;

        return $this;
    }

    /**
     * Gets product_variant_uid
     *
     * @return string|null
     */
    public function getProductVariantUid()
    {
        return $this->container['product_variant_uid'];
    }

    /**
     * Sets product_variant_uid
     *
     * @param string|null $product_variant_uid Product variant unique identifier.
     *
     * @return self
     */
    public function setProductVariantUid($product_variant_uid)
    {
        if (is_null($product_variant_uid)) {
            array_push($this->openAPINullablesSetToNull, 'product_variant_uid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_variant_uid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_variant_uid'] = $product_variant_uid;

        return $this;
    }

    /**
     * Gets product_version_id
     *
     * @return int|null
     */
    public function getProductVersionId()
    {
        return $this->container['product_version_id'];
    }

    /**
     * Sets product_version_id
     *
     * @param int|null $product_version_id Product version identifier.
     *
     * @return self
     */
    public function setProductVersionId($product_version_id)
    {
        if (is_null($product_version_id)) {
            throw new \InvalidArgumentException('non-nullable product_version_id cannot be null');
        }
        $this->container['product_version_id'] = $product_version_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int|null $product_id Product identifier.
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return int|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param int|null $tenant_id Tenant identifier.
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            array_push($this->openAPINullablesSetToNull, 'tenant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tenant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets storefront_product_variant_id
     *
     * @return string|null
     */
    public function getStorefrontProductVariantId()
    {
        return $this->container['storefront_product_variant_id'];
    }

    /**
     * Sets storefront_product_variant_id
     *
     * @param string|null $storefront_product_variant_id Product variant identifier in online store (usually SKU).
     *
     * @return self
     */
    public function setStorefrontProductVariantId($storefront_product_variant_id)
    {
        if (is_null($storefront_product_variant_id)) {
            array_push($this->openAPINullablesSetToNull, 'storefront_product_variant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storefront_product_variant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storefront_product_variant_id'] = $storefront_product_variant_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Product variant SKU.
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            array_push($this->openAPINullablesSetToNull, 'sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets mockup_id
     *
     * @return string|null
     */
    public function getMockupId()
    {
        return $this->container['mockup_id'];
    }

    /**
     * Sets mockup_id
     *
     * @param string|null $mockup_id Mockup identifier.
     *
     * @return self
     */
    public function setMockupId($mockup_id)
    {
        if (is_null($mockup_id)) {
            array_push($this->openAPINullablesSetToNull, 'mockup_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mockup_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mockup_id'] = $mockup_id;

        return $this;
    }

    /**
     * Gets mockup_name
     *
     * @return string|null
     */
    public function getMockupName()
    {
        return $this->container['mockup_name'];
    }

    /**
     * Sets mockup_name
     *
     * @param string|null $mockup_name Mockup name.
     *
     * @return self
     */
    public function setMockupName($mockup_name)
    {
        if (is_null($mockup_name)) {
            array_push($this->openAPINullablesSetToNull, 'mockup_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mockup_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mockup_name'] = $mockup_name;

        return $this;
    }

    /**
     * Gets mockup_type
     *
     * @return \Aurigma\BackOffice\Model\ProductVariantMockupType|null
     */
    public function getMockupType()
    {
        return $this->container['mockup_type'];
    }

    /**
     * Sets mockup_type
     *
     * @param \Aurigma\BackOffice\Model\ProductVariantMockupType|null $mockup_type mockup_type
     *
     * @return self
     */
    public function setMockupType($mockup_type)
    {
        if (is_null($mockup_type)) {
            throw new \InvalidArgumentException('non-nullable mockup_type cannot be null');
        }
        $this->container['mockup_type'] = $mockup_type;

        return $this;
    }

    /**
     * Gets surface_index
     *
     * @return int|null
     */
    public function getSurfaceIndex()
    {
        return $this->container['surface_index'];
    }

    /**
     * Sets surface_index
     *
     * @param int|null $surface_index Surface index indicates a surface of a design to which mockup should be applied.
     *
     * @return self
     */
    public function setSurfaceIndex($surface_index)
    {
        if (is_null($surface_index)) {
            array_push($this->openAPINullablesSetToNull, 'surface_index');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('surface_index', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['surface_index'] = $surface_index;

        return $this;
    }

    /**
     * Gets surface_usage_type
     *
     * @return \Aurigma\BackOffice\Model\SurfaceUsageType|null
     */
    public function getSurfaceUsageType()
    {
        return $this->container['surface_usage_type'];
    }

    /**
     * Sets surface_usage_type
     *
     * @param \Aurigma\BackOffice\Model\SurfaceUsageType|null $surface_usage_type surface_usage_type
     *
     * @return self
     */
    public function setSurfaceUsageType($surface_usage_type)
    {
        if (is_null($surface_usage_type)) {
            throw new \InvalidArgumentException('non-nullable surface_usage_type cannot be null');
        }
        $this->container['surface_usage_type'] = $surface_usage_type;

        return $this;
    }

    /**
     * Gets product_variant_options
     *
     * @return \Aurigma\BackOffice\Model\ProductVariantOptionDto[]|null
     */
    public function getProductVariantOptions()
    {
        return $this->container['product_variant_options'];
    }

    /**
     * Sets product_variant_options
     *
     * @param \Aurigma\BackOffice\Model\ProductVariantOptionDto[]|null $product_variant_options A list of product variant options.
     *
     * @return self
     */
    public function setProductVariantOptions($product_variant_options)
    {
        if (is_null($product_variant_options)) {
            array_push($this->openAPINullablesSetToNull, 'product_variant_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_variant_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_variant_options'] = $product_variant_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


