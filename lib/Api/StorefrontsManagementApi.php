<?php
/**
 * StorefrontsManagementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BackOffice API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: backoffice-v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\BackOffice\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aurigma\BackOffice\ApiException;
use Aurigma\BackOffice\Configuration;
use Aurigma\BackOffice\HeaderSelector;
use Aurigma\BackOffice\ObjectSerializer;

/**
 * StorefrontsManagementApi Class Doc Comment
 *
 * @category Class
 * @package  Aurigma\BackOffice
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StorefrontsManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'storefrontsManagementCreateBigCommerceStorefront' => [
            'application/json',
        ],
        'storefrontsManagementCreateCustomStorefront' => [
            'application/json',
        ],
        'storefrontsManagementCreateMagentoStorefront' => [
            'application/json',
        ],
        'storefrontsManagementCreateNopCommerceStorefront' => [
            'application/json',
        ],
        'storefrontsManagementCreateWooCommerceStorefront' => [
            'application/json',
        ],
        'storefrontsManagementDelete' => [
            'application/json',
        ],
        'storefrontsManagementGet' => [
            'application/json',
        ],
        'storefrontsManagementGetAll' => [
            'application/json',
        ],
        'storefrontsManagementGetBigCommerceStorefront' => [
            'application/json',
        ],
        'storefrontsManagementGetCustomStorefront' => [
            'application/json',
        ],
        'storefrontsManagementGetMagentoStorefront' => [
            'application/json',
        ],
        'storefrontsManagementGetNopCommerceStorefront' => [
            'application/json',
        ],
        'storefrontsManagementGetWooCommerceStorefront' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation storefrontsManagementCreateBigCommerceStorefront
     *
     * Creates new BigCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateBigCommerceStorefrontDto $create_big_commerce_storefront_dto BigCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\BigCommerceStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto
     */
    public function storefrontsManagementCreateBigCommerceStorefront($tenant_id = null, $create_big_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'][0])
    {
        list($response) = $this->storefrontsManagementCreateBigCommerceStorefrontWithHttpInfo($tenant_id, $create_big_commerce_storefront_dto, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementCreateBigCommerceStorefrontWithHttpInfo
     *
     * Creates new BigCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateBigCommerceStorefrontDto $create_big_commerce_storefront_dto BigCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\BigCommerceStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementCreateBigCommerceStorefrontWithHttpInfo($tenant_id = null, $create_big_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'][0])
    {
        $request = $this->storefrontsManagementCreateBigCommerceStorefrontRequest($tenant_id, $create_big_commerce_storefront_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\BigCommerceStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\BigCommerceStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\BigCommerceStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\BigCommerceStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\BigCommerceStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementCreateBigCommerceStorefrontAsync
     *
     * Creates new BigCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateBigCommerceStorefrontDto $create_big_commerce_storefront_dto BigCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateBigCommerceStorefrontAsync($tenant_id = null, $create_big_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'][0])
    {
        return $this->storefrontsManagementCreateBigCommerceStorefrontAsyncWithHttpInfo($tenant_id, $create_big_commerce_storefront_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementCreateBigCommerceStorefrontAsyncWithHttpInfo
     *
     * Creates new BigCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateBigCommerceStorefrontDto $create_big_commerce_storefront_dto BigCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateBigCommerceStorefrontAsyncWithHttpInfo($tenant_id = null, $create_big_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\BigCommerceStorefrontDto';
        $request = $this->storefrontsManagementCreateBigCommerceStorefrontRequest($tenant_id, $create_big_commerce_storefront_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementCreateBigCommerceStorefront'
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateBigCommerceStorefrontDto $create_big_commerce_storefront_dto BigCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementCreateBigCommerceStorefrontRequest($tenant_id = null, $create_big_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateBigCommerceStorefront'][0])
    {




        $resourcePath = '/api/backoffice/v1/storefronts/bigcommerce';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_big_commerce_storefront_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_big_commerce_storefront_dto));
            } else {
                $httpBody = $create_big_commerce_storefront_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementCreateCustomStorefront
     *
     * Creates new custom storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateCustomStorefrontDto $create_custom_storefront_dto Custom storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateCustomStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\CustomStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto
     */
    public function storefrontsManagementCreateCustomStorefront($tenant_id = null, $create_custom_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateCustomStorefront'][0])
    {
        list($response) = $this->storefrontsManagementCreateCustomStorefrontWithHttpInfo($tenant_id, $create_custom_storefront_dto, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementCreateCustomStorefrontWithHttpInfo
     *
     * Creates new custom storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateCustomStorefrontDto $create_custom_storefront_dto Custom storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateCustomStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\CustomStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementCreateCustomStorefrontWithHttpInfo($tenant_id = null, $create_custom_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateCustomStorefront'][0])
    {
        $request = $this->storefrontsManagementCreateCustomStorefrontRequest($tenant_id, $create_custom_storefront_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\CustomStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\CustomStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\CustomStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\CustomStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\CustomStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementCreateCustomStorefrontAsync
     *
     * Creates new custom storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateCustomStorefrontDto $create_custom_storefront_dto Custom storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateCustomStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateCustomStorefrontAsync($tenant_id = null, $create_custom_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateCustomStorefront'][0])
    {
        return $this->storefrontsManagementCreateCustomStorefrontAsyncWithHttpInfo($tenant_id, $create_custom_storefront_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementCreateCustomStorefrontAsyncWithHttpInfo
     *
     * Creates new custom storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateCustomStorefrontDto $create_custom_storefront_dto Custom storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateCustomStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateCustomStorefrontAsyncWithHttpInfo($tenant_id = null, $create_custom_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateCustomStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\CustomStorefrontDto';
        $request = $this->storefrontsManagementCreateCustomStorefrontRequest($tenant_id, $create_custom_storefront_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementCreateCustomStorefront'
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateCustomStorefrontDto $create_custom_storefront_dto Custom storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateCustomStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementCreateCustomStorefrontRequest($tenant_id = null, $create_custom_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateCustomStorefront'][0])
    {




        $resourcePath = '/api/backoffice/v1/storefronts/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_custom_storefront_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_custom_storefront_dto));
            } else {
                $httpBody = $create_custom_storefront_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementCreateMagentoStorefront
     *
     * Creates new Magento storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateMagentoStorefrontDto $create_magento_storefront_dto Magento storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\MagentoStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto
     */
    public function storefrontsManagementCreateMagentoStorefront($tenant_id = null, $create_magento_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateMagentoStorefront'][0])
    {
        list($response) = $this->storefrontsManagementCreateMagentoStorefrontWithHttpInfo($tenant_id, $create_magento_storefront_dto, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementCreateMagentoStorefrontWithHttpInfo
     *
     * Creates new Magento storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateMagentoStorefrontDto $create_magento_storefront_dto Magento storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\MagentoStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementCreateMagentoStorefrontWithHttpInfo($tenant_id = null, $create_magento_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateMagentoStorefront'][0])
    {
        $request = $this->storefrontsManagementCreateMagentoStorefrontRequest($tenant_id, $create_magento_storefront_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\MagentoStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MagentoStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MagentoStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\MagentoStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MagentoStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementCreateMagentoStorefrontAsync
     *
     * Creates new Magento storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateMagentoStorefrontDto $create_magento_storefront_dto Magento storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateMagentoStorefrontAsync($tenant_id = null, $create_magento_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateMagentoStorefront'][0])
    {
        return $this->storefrontsManagementCreateMagentoStorefrontAsyncWithHttpInfo($tenant_id, $create_magento_storefront_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementCreateMagentoStorefrontAsyncWithHttpInfo
     *
     * Creates new Magento storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateMagentoStorefrontDto $create_magento_storefront_dto Magento storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateMagentoStorefrontAsyncWithHttpInfo($tenant_id = null, $create_magento_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateMagentoStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\MagentoStorefrontDto';
        $request = $this->storefrontsManagementCreateMagentoStorefrontRequest($tenant_id, $create_magento_storefront_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementCreateMagentoStorefront'
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateMagentoStorefrontDto $create_magento_storefront_dto Magento storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementCreateMagentoStorefrontRequest($tenant_id = null, $create_magento_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateMagentoStorefront'][0])
    {




        $resourcePath = '/api/backoffice/v1/storefronts/magento';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_magento_storefront_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_magento_storefront_dto));
            } else {
                $httpBody = $create_magento_storefront_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementCreateNopCommerceStorefront
     *
     * Creates new NopCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateNopCommerceStorefrontDto $create_nop_commerce_storefront_dto NopCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\NopCommerceStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto
     */
    public function storefrontsManagementCreateNopCommerceStorefront($tenant_id = null, $create_nop_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'][0])
    {
        list($response) = $this->storefrontsManagementCreateNopCommerceStorefrontWithHttpInfo($tenant_id, $create_nop_commerce_storefront_dto, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementCreateNopCommerceStorefrontWithHttpInfo
     *
     * Creates new NopCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateNopCommerceStorefrontDto $create_nop_commerce_storefront_dto NopCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\NopCommerceStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementCreateNopCommerceStorefrontWithHttpInfo($tenant_id = null, $create_nop_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'][0])
    {
        $request = $this->storefrontsManagementCreateNopCommerceStorefrontRequest($tenant_id, $create_nop_commerce_storefront_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\NopCommerceStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\NopCommerceStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\NopCommerceStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\NopCommerceStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\NopCommerceStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementCreateNopCommerceStorefrontAsync
     *
     * Creates new NopCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateNopCommerceStorefrontDto $create_nop_commerce_storefront_dto NopCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateNopCommerceStorefrontAsync($tenant_id = null, $create_nop_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'][0])
    {
        return $this->storefrontsManagementCreateNopCommerceStorefrontAsyncWithHttpInfo($tenant_id, $create_nop_commerce_storefront_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementCreateNopCommerceStorefrontAsyncWithHttpInfo
     *
     * Creates new NopCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateNopCommerceStorefrontDto $create_nop_commerce_storefront_dto NopCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateNopCommerceStorefrontAsyncWithHttpInfo($tenant_id = null, $create_nop_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\NopCommerceStorefrontDto';
        $request = $this->storefrontsManagementCreateNopCommerceStorefrontRequest($tenant_id, $create_nop_commerce_storefront_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementCreateNopCommerceStorefront'
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateNopCommerceStorefrontDto $create_nop_commerce_storefront_dto NopCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementCreateNopCommerceStorefrontRequest($tenant_id = null, $create_nop_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateNopCommerceStorefront'][0])
    {




        $resourcePath = '/api/backoffice/v1/storefronts/nopcommerce';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_nop_commerce_storefront_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_nop_commerce_storefront_dto));
            } else {
                $httpBody = $create_nop_commerce_storefront_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementCreateWooCommerceStorefront
     *
     * Creates new WooCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateWooCommerceStorefrontDto $create_woo_commerce_storefront_dto WooCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\WooCommerceStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto
     */
    public function storefrontsManagementCreateWooCommerceStorefront($tenant_id = null, $create_woo_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'][0])
    {
        list($response) = $this->storefrontsManagementCreateWooCommerceStorefrontWithHttpInfo($tenant_id, $create_woo_commerce_storefront_dto, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementCreateWooCommerceStorefrontWithHttpInfo
     *
     * Creates new WooCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateWooCommerceStorefrontDto $create_woo_commerce_storefront_dto WooCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\WooCommerceStorefrontDto|\Aurigma\BackOffice\Model\GeneralConflictDto|\Aurigma\BackOffice\Model\GeneralConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementCreateWooCommerceStorefrontWithHttpInfo($tenant_id = null, $create_woo_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'][0])
    {
        $request = $this->storefrontsManagementCreateWooCommerceStorefrontRequest($tenant_id, $create_woo_commerce_storefront_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\WooCommerceStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\WooCommerceStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\WooCommerceStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\BackOffice\Model\GeneralConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\GeneralConflictDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\GeneralConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\WooCommerceStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\WooCommerceStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\GeneralConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementCreateWooCommerceStorefrontAsync
     *
     * Creates new WooCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateWooCommerceStorefrontDto $create_woo_commerce_storefront_dto WooCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateWooCommerceStorefrontAsync($tenant_id = null, $create_woo_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'][0])
    {
        return $this->storefrontsManagementCreateWooCommerceStorefrontAsyncWithHttpInfo($tenant_id, $create_woo_commerce_storefront_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementCreateWooCommerceStorefrontAsyncWithHttpInfo
     *
     * Creates new WooCommerce storefront.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateWooCommerceStorefrontDto $create_woo_commerce_storefront_dto WooCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementCreateWooCommerceStorefrontAsyncWithHttpInfo($tenant_id = null, $create_woo_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\WooCommerceStorefrontDto';
        $request = $this->storefrontsManagementCreateWooCommerceStorefrontRequest($tenant_id, $create_woo_commerce_storefront_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementCreateWooCommerceStorefront'
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\BackOffice\Model\CreateWooCommerceStorefrontDto $create_woo_commerce_storefront_dto WooCommerce storefront creation model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementCreateWooCommerceStorefrontRequest($tenant_id = null, $create_woo_commerce_storefront_dto = null, string $contentType = self::contentTypes['storefrontsManagementCreateWooCommerceStorefront'][0])
    {




        $resourcePath = '/api/backoffice/v1/storefronts/woocommerce';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_woo_commerce_storefront_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_woo_commerce_storefront_dto));
            } else {
                $httpBody = $create_woo_commerce_storefront_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementDelete
     *
     * Deletes an existing storefront by its identifier.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementDelete'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\StorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function storefrontsManagementDelete($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementDelete'][0])
    {
        list($response) = $this->storefrontsManagementDeleteWithHttpInfo($id, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementDeleteWithHttpInfo
     *
     * Deletes an existing storefront by its identifier.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementDelete'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\StorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementDeleteWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementDelete'][0])
    {
        $request = $this->storefrontsManagementDeleteRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\StorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\StorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\StorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\StorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\StorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementDeleteAsync
     *
     * Deletes an existing storefront by its identifier.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementDeleteAsync($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementDelete'][0])
    {
        return $this->storefrontsManagementDeleteAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementDeleteAsyncWithHttpInfo
     *
     * Deletes an existing storefront by its identifier.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementDeleteAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementDelete'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\StorefrontDto';
        $request = $this->storefrontsManagementDeleteRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementDelete'
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementDeleteRequest($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling storefrontsManagementDelete'
            );
        }



        $resourcePath = '/api/backoffice/v1/storefronts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementGet
     *
     * Returns a storefront by identifier.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGet'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\StorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function storefrontsManagementGet($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGet'][0])
    {
        list($response) = $this->storefrontsManagementGetWithHttpInfo($id, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementGetWithHttpInfo
     *
     * Returns a storefront by identifier.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGet'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\StorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementGetWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGet'][0])
    {
        $request = $this->storefrontsManagementGetRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\StorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\StorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\StorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\StorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\StorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementGetAsync
     *
     * Returns a storefront by identifier.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetAsync($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGet'][0])
    {
        return $this->storefrontsManagementGetAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementGetAsyncWithHttpInfo
     *
     * Returns a storefront by identifier.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGet'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\StorefrontDto';
        $request = $this->storefrontsManagementGetRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementGet'
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementGetRequest($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling storefrontsManagementGet'
            );
        }



        $resourcePath = '/api/backoffice/v1/storefronts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementGetAll
     *
     * Returns all storefronts, relevant to the specified query parameters.
     *
     * @param  \Aurigma\BackOffice\Model\StorefrontType[] $types Storefront type filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetAll'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\PagedOfStorefrontDto
     */
    public function storefrontsManagementGetAll($types = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetAll'][0])
    {
        list($response) = $this->storefrontsManagementGetAllWithHttpInfo($types, $skip, $take, $sorting, $search, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementGetAllWithHttpInfo
     *
     * Returns all storefronts, relevant to the specified query parameters.
     *
     * @param  \Aurigma\BackOffice\Model\StorefrontType[] $types Storefront type filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetAll'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\PagedOfStorefrontDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementGetAllWithHttpInfo($types = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetAll'][0])
    {
        $request = $this->storefrontsManagementGetAllRequest($types, $skip, $take, $sorting, $search, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\PagedOfStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\PagedOfStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\PagedOfStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\PagedOfStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\PagedOfStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementGetAllAsync
     *
     * Returns all storefronts, relevant to the specified query parameters.
     *
     * @param  \Aurigma\BackOffice\Model\StorefrontType[] $types Storefront type filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetAllAsync($types = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetAll'][0])
    {
        return $this->storefrontsManagementGetAllAsyncWithHttpInfo($types, $skip, $take, $sorting, $search, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementGetAllAsyncWithHttpInfo
     *
     * Returns all storefronts, relevant to the specified query parameters.
     *
     * @param  \Aurigma\BackOffice\Model\StorefrontType[] $types Storefront type filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetAllAsyncWithHttpInfo($types = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetAll'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\PagedOfStorefrontDto';
        $request = $this->storefrontsManagementGetAllRequest($types, $skip, $take, $sorting, $search, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementGetAll'
     *
     * @param  \Aurigma\BackOffice\Model\StorefrontType[] $types Storefront type filter. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementGetAllRequest($types = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetAll'][0])
    {








        $resourcePath = '/api/backoffice/v1/storefronts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $types,
            'types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sorting,
            'sorting', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementGetBigCommerceStorefront
     *
     * Returns extended information about BigCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\MagentoStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function storefrontsManagementGetBigCommerceStorefront($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetBigCommerceStorefront'][0])
    {
        list($response) = $this->storefrontsManagementGetBigCommerceStorefrontWithHttpInfo($id, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementGetBigCommerceStorefrontWithHttpInfo
     *
     * Returns extended information about BigCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\MagentoStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementGetBigCommerceStorefrontWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetBigCommerceStorefront'][0])
    {
        $request = $this->storefrontsManagementGetBigCommerceStorefrontRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\MagentoStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MagentoStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MagentoStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\MagentoStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MagentoStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementGetBigCommerceStorefrontAsync
     *
     * Returns extended information about BigCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetBigCommerceStorefrontAsync($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetBigCommerceStorefront'][0])
    {
        return $this->storefrontsManagementGetBigCommerceStorefrontAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementGetBigCommerceStorefrontAsyncWithHttpInfo
     *
     * Returns extended information about BigCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetBigCommerceStorefrontAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetBigCommerceStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\MagentoStorefrontDto';
        $request = $this->storefrontsManagementGetBigCommerceStorefrontRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementGetBigCommerceStorefront'
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetBigCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementGetBigCommerceStorefrontRequest($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetBigCommerceStorefront'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling storefrontsManagementGetBigCommerceStorefront'
            );
        }



        $resourcePath = '/api/backoffice/v1/storefronts/bigcommerce/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementGetCustomStorefront
     *
     * Returns extended information about custom storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetCustomStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\CustomStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function storefrontsManagementGetCustomStorefront($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetCustomStorefront'][0])
    {
        list($response) = $this->storefrontsManagementGetCustomStorefrontWithHttpInfo($id, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementGetCustomStorefrontWithHttpInfo
     *
     * Returns extended information about custom storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetCustomStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\CustomStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementGetCustomStorefrontWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetCustomStorefront'][0])
    {
        $request = $this->storefrontsManagementGetCustomStorefrontRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\CustomStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\CustomStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\CustomStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\CustomStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\CustomStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementGetCustomStorefrontAsync
     *
     * Returns extended information about custom storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetCustomStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetCustomStorefrontAsync($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetCustomStorefront'][0])
    {
        return $this->storefrontsManagementGetCustomStorefrontAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementGetCustomStorefrontAsyncWithHttpInfo
     *
     * Returns extended information about custom storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetCustomStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetCustomStorefrontAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetCustomStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\CustomStorefrontDto';
        $request = $this->storefrontsManagementGetCustomStorefrontRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementGetCustomStorefront'
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetCustomStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementGetCustomStorefrontRequest($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetCustomStorefront'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling storefrontsManagementGetCustomStorefront'
            );
        }



        $resourcePath = '/api/backoffice/v1/storefronts/custom/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementGetMagentoStorefront
     *
     * Returns extended information about Magento storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\MagentoStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function storefrontsManagementGetMagentoStorefront($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetMagentoStorefront'][0])
    {
        list($response) = $this->storefrontsManagementGetMagentoStorefrontWithHttpInfo($id, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementGetMagentoStorefrontWithHttpInfo
     *
     * Returns extended information about Magento storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\MagentoStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementGetMagentoStorefrontWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetMagentoStorefront'][0])
    {
        $request = $this->storefrontsManagementGetMagentoStorefrontRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\MagentoStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MagentoStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MagentoStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\MagentoStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MagentoStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementGetMagentoStorefrontAsync
     *
     * Returns extended information about Magento storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetMagentoStorefrontAsync($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetMagentoStorefront'][0])
    {
        return $this->storefrontsManagementGetMagentoStorefrontAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementGetMagentoStorefrontAsyncWithHttpInfo
     *
     * Returns extended information about Magento storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetMagentoStorefrontAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetMagentoStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\MagentoStorefrontDto';
        $request = $this->storefrontsManagementGetMagentoStorefrontRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementGetMagentoStorefront'
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetMagentoStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementGetMagentoStorefrontRequest($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetMagentoStorefront'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling storefrontsManagementGetMagentoStorefront'
            );
        }



        $resourcePath = '/api/backoffice/v1/storefronts/magento/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementGetNopCommerceStorefront
     *
     * Returns extended information about NopCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\NopCommerceStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function storefrontsManagementGetNopCommerceStorefront($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetNopCommerceStorefront'][0])
    {
        list($response) = $this->storefrontsManagementGetNopCommerceStorefrontWithHttpInfo($id, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementGetNopCommerceStorefrontWithHttpInfo
     *
     * Returns extended information about NopCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\NopCommerceStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementGetNopCommerceStorefrontWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetNopCommerceStorefront'][0])
    {
        $request = $this->storefrontsManagementGetNopCommerceStorefrontRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\NopCommerceStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\NopCommerceStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\NopCommerceStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\NopCommerceStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\NopCommerceStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementGetNopCommerceStorefrontAsync
     *
     * Returns extended information about NopCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetNopCommerceStorefrontAsync($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetNopCommerceStorefront'][0])
    {
        return $this->storefrontsManagementGetNopCommerceStorefrontAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementGetNopCommerceStorefrontAsyncWithHttpInfo
     *
     * Returns extended information about NopCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetNopCommerceStorefrontAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetNopCommerceStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\NopCommerceStorefrontDto';
        $request = $this->storefrontsManagementGetNopCommerceStorefrontRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementGetNopCommerceStorefront'
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetNopCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementGetNopCommerceStorefrontRequest($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetNopCommerceStorefront'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling storefrontsManagementGetNopCommerceStorefront'
            );
        }



        $resourcePath = '/api/backoffice/v1/storefronts/nopcommerce/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storefrontsManagementGetWooCommerceStorefront
     *
     * Returns extended information about WooCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aurigma\BackOffice\Model\WooCommerceStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function storefrontsManagementGetWooCommerceStorefront($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetWooCommerceStorefront'][0])
    {
        list($response) = $this->storefrontsManagementGetWooCommerceStorefrontWithHttpInfo($id, $tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation storefrontsManagementGetWooCommerceStorefrontWithHttpInfo
     *
     * Returns extended information about WooCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \Aurigma\BackOffice\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\BackOffice\Model\WooCommerceStorefrontDto|\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storefrontsManagementGetWooCommerceStorefrontWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetWooCommerceStorefront'][0])
    {
        $request = $this->storefrontsManagementGetWooCommerceStorefrontRequest($id, $tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\BackOffice\Model\WooCommerceStorefrontDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\WooCommerceStorefrontDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\WooCommerceStorefrontDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\BackOffice\Model\WooCommerceStorefrontDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\WooCommerceStorefrontDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\BackOffice\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storefrontsManagementGetWooCommerceStorefrontAsync
     *
     * Returns extended information about WooCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetWooCommerceStorefrontAsync($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetWooCommerceStorefront'][0])
    {
        return $this->storefrontsManagementGetWooCommerceStorefrontAsyncWithHttpInfo($id, $tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storefrontsManagementGetWooCommerceStorefrontAsyncWithHttpInfo
     *
     * Returns extended information about WooCommerce storefront.
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storefrontsManagementGetWooCommerceStorefrontAsyncWithHttpInfo($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetWooCommerceStorefront'][0])
    {
        $returnType = '\Aurigma\BackOffice\Model\WooCommerceStorefrontDto';
        $request = $this->storefrontsManagementGetWooCommerceStorefrontRequest($id, $tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storefrontsManagementGetWooCommerceStorefront'
     *
     * @param  int $id Storefront identifier. (required)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storefrontsManagementGetWooCommerceStorefront'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storefrontsManagementGetWooCommerceStorefrontRequest($id, $tenant_id = null, string $contentType = self::contentTypes['storefrontsManagementGetWooCommerceStorefront'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling storefrontsManagementGetWooCommerceStorefront'
            );
        }



        $resourcePath = '/api/backoffice/v1/storefronts/woocommerce/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
